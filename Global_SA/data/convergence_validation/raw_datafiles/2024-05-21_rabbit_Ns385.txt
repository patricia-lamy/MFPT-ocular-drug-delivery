From global_analysis_rabbit_all_params.py

Redoing the 2024-04-29 SA for the rabbit, all params varying within their uncertainty ranges, but for Ns=385 now. 

#####################################################################################

# Prerequesites

import mph
import time
import pandas as pd
import numpy as np
from SALib.sample import fast_sampler

# Defining the problem
# Defining model input
sample_size = 385
num_vars = 9
problem = {
    'num_vars': num_vars,
    'names': ['dummy', 'a', 'b', 'lens_diam', 'lens_thick', 'h_va',
              'D', 'k_va', 'k_vr'],
    'bounds': [[0, 1],
               [0.88, 0.92],            # cm
               [0.566, 0.611],          # cm
               [0.971, 1.019],          # cm
               [0.606, 0.697],          # cm
               [0.2142, 0.2618],        # cm
               [1.01e-10, 1.13e-10],    # m2/s, D
               [1.24e-7, 3.92e-7],      # m/s, k_va
               [1.25e-9, 2.44e-9]       # m/s, k_vr
               ]
}


total_nb_comb = sample_size*problem["num_vars"]
print('Nb of simulations:', total_nb_comb)
chunk_size = 9
nb_chuncks = int(total_nb_comb / chunk_size)

client = mph.start(cores=1)
model = client.load('mfpt_model_rabbit.mph')
model.build()
print(model.parameters())


# Step 1: Sampling
param_values = fast_sampler.sample(problem, sample_size, seed=42)


# Step 2: Solving the MFPT PDE
start = time.time()
mfpt_list = np.empty((chunk_size, 7))
for j in range(0, nb_chuncks):
    print(j)
    for i in range(0, chunk_size):
        position_param = j*chunk_size + i
        # Assigning variables
        a = param_values[position_param, 1]
        b = param_values[position_param, 2]
        lens_diam = param_values[position_param, 3]
        lens_thick = param_values[position_param, 4]
        h_va = param_values[position_param, 5]
        # Calculating midpoint for output
        y_lens = np.sqrt(b**2*(1 - (lens_diam/2)**2/a**2))
        y_lens_rabbit = y_lens - (lens_thick/7)
        int_lens_A = a**2/b**2 - lens_diam**2/lens_thick**2
        int_lens_B = 2*lens_diam**2*y_lens_rabbit/lens_thick**2
        int_lens_C = lens_diam**2/4 - a**2 - (lens_diam**2/lens_thick**2)*y_lens_rabbit**2
        h_lens = b-y_lens
        h_os = b - (h_lens + h_va)
        y_lens_inters = (- int_lens_B + np.sqrt(int_lens_B**2 - 4*int_lens_A*int_lens_C))/(2*int_lens_A)
        x_lens_inters = np.sqrt(a**2*(1 - y_lens_inters**2/b**2))

        y_mid = (lens_thick/2 - y_lens_rabbit + b)/2
        y_q1 = (b - (b - (lens_thick/2 - y_lens_rabbit))/4)
        y_q2 = (b - 3*(b - (lens_thick/2 - y_lens_rabbit))/4)
        x_os = np.sqrt(a**2*(1 - (h_os)**2/b**2))
        y_lens_inters_mid = (np.sqrt(lens_thick**2/4 * (1 - x_lens_inters**2/(lens_diam**2/4))) - y_lens_rabbit + np.sqrt(b**2*(1-x_lens_inters**2/a**2)))/2
        y_lens_inters_q1 = (np.sqrt(b**2*(1-x_lens_inters**2/a**2)) - (np.sqrt(b**2*(1-x_lens_inters**2/a**2)) - (np.sqrt(lens_thick**2/4 * (1 - x_lens_inters**2/(lens_diam**2/4))) - y_lens_rabbit))/4)
        y_lens_inters_q2 = (np.sqrt(b**2*(1-x_lens_inters**2/a**2)) - 3 * ((np.sqrt(b**2*(1-x_lens_inters**2/a**2)) - (np.sqrt(lens_thick**2/4 * (1 - x_lens_inters**2/(lens_diam**2/4))) - y_lens_rabbit)))/4)

        # Assigning parameter values in Comsol model
        model.parameter('a', str(a) + '[cm]')
        model.parameter('b', str(b) + '[cm]')
        model.parameter('lens_diam', str(lens_diam) + '[cm]')
        model.parameter('lens_thick', str(lens_thick) + '[cm]')
        model.parameter('h_va', str(h_va) + '[cm]')
        model.parameter('D', str(param_values[position_param, 6]))
        model.parameter('hya_perm', str(param_values[position_param, 7]))
        model.parameter('ilm_perm', str(param_values[position_param, 8]))
        #model.build()
        #print(model.parameters())
        model.solve()
        [x, y, z, u] = model.evaluate(['x', 'y', 'z', 'u'])

        # Finding the argument for mfpt from the midpoint:
        # Mid point between lens hollow and macula
        x0_arg = np.nonzero(x == 0)
        y0_arg = np.nonzero(y == 0)
        z0_arg = np.nonzero(z == 0)
        z_mid = np.nonzero(np.isclose(z, y_mid))
        z_mid_q1 = np.nonzero(np.isclose(z, y_q1))
        z_mid_q2 = np.nonzero(np.isclose(z, y_q2))
        y_lens_inters_arg = np.nonzero(np.isclose(y, x_lens_inters))
        z_lens_inters_mid = np.nonzero(np.isclose(z, y_lens_inters_mid))
        z_lens_inters_q1 = np.nonzero(np.isclose(z, y_lens_inters_q1))
        z_lens_inters_q2 = np.nonzero(np.isclose(z, y_lens_inters_q2))
        y_os_arg = np.nonzero(np.isclose(y, x_os))

        xy_intersect_0 = np.intersect1d(x0_arg, y0_arg)
        xz_intersect_0 = np.intersect1d(x0_arg, z0_arg)
        xz_intersect_0_zmid = np.intersect1d(x0_arg, z_mid)
        xz_intersect_0_zmidq1 = np.intersect1d(x0_arg, z_mid_q1)
        xz_intersect_0_zmidq2 = np.intersect1d(x0_arg, z_mid_q2)
        xy_intersect_0_ylens = np.intersect1d(x0_arg, y_lens_inters_arg)
        xz_intersect_0_zlens_mid = np.intersect1d(x0_arg, z_lens_inters_mid)
        xz_intersect_0_zlens_q1 = np.intersect1d(x0_arg, z_lens_inters_q1)
        xz_intersect_0_zlens_q2 = np.intersect1d(x0_arg, z_lens_inters_q2)
        xy_intersect_0_yos = np.intersect1d(x0_arg, y_os_arg)

        arg_mid = np.intersect1d(xy_intersect_0, xz_intersect_0_zmid)
        arg_mid_q1 = np.intersect1d(xy_intersect_0, xz_intersect_0_zmidq1)
        arg_mid_q2 = np.intersect1d(xy_intersect_0, xz_intersect_0_zmidq2)
        arg_lens_diam_mid = np.intersect1d(xz_intersect_0_zlens_mid,
                                           xy_intersect_0_ylens)
        arg_lens_diam_q1 = np.intersect1d(xz_intersect_0_zlens_q1,
                                          xy_intersect_0_ylens)
        arg_lens_diam_q2 = np.intersect1d(xz_intersect_0_zlens_q2,
                                          xy_intersect_0_ylens)
        arg_xos_pt = np.intersect1d(xz_intersect_0, xy_intersect_0_yos)

        # Evaluating solution at midpoint:
        mfpt_pt1 = u[arg_mid]/(3600*24)
        mfpt_pt2 = u[arg_mid_q1]/(3600*24)
        mfpt_pt3 = u[arg_mid_q2]/(3600*24)
        mfpt_pt4 = u[arg_lens_diam_mid]/(3600*24)
        mfpt_pt5 = u[arg_lens_diam_q1]/(3600*24)
        mfpt_pt6 = u[arg_lens_diam_q2]/(3600*24)
        mfpt_pt7 = u[arg_xos_pt]/(3600*24)
        mfpt = np.array([mfpt_pt1[0], mfpt_pt2[0], mfpt_pt3[0], mfpt_pt4[0],
                         mfpt_pt5[0], mfpt_pt6[0], mfpt_pt7[0]])
        mfpt_list[i] = mfpt

    l_bd = position_param-chunk_size + 1
    h_bd = position_param + 1
    print(l_bd, h_bd)

    df = pd.DataFrame({'#a': param_values[l_bd:h_bd, 1],
                       '#b': param_values[l_bd:h_bd, 2],
                       '#Lens diameter': param_values[l_bd:h_bd, 3],
                       '#Lens thickness': param_values[l_bd:h_bd, 4],
                       '#Height va int': param_values[l_bd:h_bd, 5],
                       '#Diffusion coef': param_values[l_bd:h_bd, 6],
                       '#Perm va': param_values[l_bd:h_bd, 7],
                       '#Perm vr': param_values[l_bd:h_bd, 8],
                       '#MFPT P1 (days)': mfpt_list[:, 0],
                       '#MFPT P2 (days)': mfpt_list[:, 1],
                       '#MFPT P3 (days)': mfpt_list[:, 2],
                       '#MFPT P4 (days)': mfpt_list[:, 3],
                       '#MFPT P5 (days)': mfpt_list[:, 4],
                       '#MFPT P6 (days)': mfpt_list[:, 5],
                       '#MFPT P7 (days)': mfpt_list[:, 6]
                       })
    df.to_csv("data/2024-05-21_rabbit_Ns385.csv", index=False,
              header=(j == 0), mode='a')

end = time.time()
print(end - start)

